package foodcatering_package;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;public class FoodCatering {	/**It is the menu of the food shop*/	public static void menu() {		System.out.println("\t\t\t\t**************************************************");		System.out.println("\t\t\t\t         Our menu                                 ");		System.out.println("\t\t\t\tAppetizers:                                        ");		System.out.println("\t\t\t\t  1.Salad           (10.00 calories,$5.00)          ");		System.out.println("\t\t\t\t  2.Fries           (100.25 calories,$45.50)        ");		System.out.println("\t\t\t\t  3.Soup            (15.05 calories,$15.00)         ");		System.out.println("\t\t\t\t  4.Sweet Potato    (200.10 calories,$20.25)        ");		System.out.println("\t\t\t\t  5.Cheese          (5.00 calories,$4.00)           ");		System.out.println("\t\t\t\tDesserts                                          ");		System.out.println("\t\t\t\t  1.Cheese Cake     (300.05 calories,$10.06)        ");		System.out.println("\t\t\t\t  2.Apple Pie       (400.06 calories,$40.10)        ");		System.out.println("\t\t\t\t  3.Chocolate       (500.50 calories,$15.04)        ");		System.out.println("\t\t\t\t  4.Pancake         (200.15 calories,$25.15)        ");		System.out.println("\t\t\t\t  5.Cookies         (55.00 calories,$5.00)          ");		System.out.println("\t\t\t\tMain dashes                                       ");		System.out.println("\t\t\t\t  1.Pasta           (65.60 calories,$79.00)         ");		System.out.println("\t\t\t\t  2.Chicken         (50.50 calories,$54.50)         ");		System.out.println("\t\t\t\t  3.Meat            (24.05 calories,$22.05)         ");		System.out.println("\t\t\t\t  4.Green beans     (15.00 calories,$15.05)         ");		System.out.println("\t\t\t\t  5.Fish            (4.00 calories,$33.00)          ");		System.out.println("\t\t\t\tDrinks                                            ");		System.out.println("\t\t\t\t  1.Orange Juice    (15.15 calories,$5.00)          ");		System.out.println("\t\t\t\t  2.Tea             (25.25 calories,$10.00)         ");		System.out.println("\t\t\t\t  3.Coffee          (20.21 calories,$25.00)         ");		System.out.println("\t\t\t\t  4.Latte           (40.10 calories,$40.00)         ");		System.out.println("\t\t\t\t  5.Water           (5.00 calories,$3.00)           ");		System.out.println("\t\t\t\t**************************************************");	}	public static void main(String[] args) {		menu();		Customer [] cust = new Customer[4];		ArrayList<FoodItem>app = new ArrayList<FoodItem>();		ArrayList<FoodItem>des = new ArrayList<FoodItem>();		ArrayList<FoodItem>mai = new ArrayList<FoodItem>();		ArrayList<FoodItem>dri = new ArrayList<FoodItem>();		FoodItem i = new Appetizers("Salad", "Appetizers", (float)5.00, (float)10.00, 5);		app.add(i);		i = new Desserts("Cookies", "Desserts", (float)5.00, (float)55.00, 5);		app.add(i);		i = new Drinks("Tea", "Drinks", (float)10.00, (float)25.25, 1);		app.add(i);		i = new MainDashes("Pasta", "Main dashes", (float)79.00, (float)65.60, 5);		app.add(i);		app.forEach(item->{			item.showdata();		});		System.out.println("*******************************************");		FoodItem item = new Appetizers("Fries", "Appetizers", (float)45.50, (float)100.25, 5);		des.add(item);		item = new Desserts("Cheese cake", "Desserts", (float)10.06, (float)300.05, 5);		des.add(item);		item = new Drinks("Tea", "Drinks", (float)10.00, (float)25.25, 1);		des.add(item);		item = new MainDashes("Chicken", "Main dashes", (float)54.50, (float)50.50, 5);		des.add(item);		des.forEach(items->{			items.showdata();		});		System.out.println("*******************************************");		FoodItem ite = new Appetizers("Cheese", "Appetizers", (float)4.00, (float)5.00, 3);		mai.add(ite);		ite = new Desserts("Pancake", "Desserts", (float)25.15, (float)200.15, 4);		mai.add(ite);		ite = new Drinks("Water", "Drinks", (float)3.00, (float)5.00, 1);		mai.add(ite);		ite = new MainDashes("Chicken", "Main dashes", (float)54.50, (float)50.50, 5);		mai.add(ite);		mai.forEach(it->{			it.showdata();		});		System.out.println("*******************************************");		FoodItem it = new Appetizers("Cheese", "Appetizers", (float)5.00, (float)4.00, 4);		dri.add(it);		it = new Desserts("Apple pie", "Desserts", (float)40.10, (float)400.06, 6);		dri.add(it);		it = new Drinks("Latte", "Drinks", (float)40.00, (float)40.10, 1);		dri.add(it);		it = new MainDashes("Green beans", "Main dashes", (float)15.05, (float)15.00, 5);		dri.add(it);		dri.forEach(ites->{			ites.showdata();		});		System.out.println("*********************************************");		cust[0] = new Loyaltycustomer();		cust[1] = new Loyaltycustomer();		cust[2] = new Guset();		cust[3] = new Guset();				cust[0].create(5,"25,Khaled abn Elwaled",app);		((Loyaltycustomer)cust[0]).freemeal();		cust[0].cancel(4);		System.out.println("*********************************************");		cust[1].create(1, "56,Elhelmay street", des);		((Loyaltycustomer)cust[1]).freemeal();		cust[1].update(6, 1);		((Loyaltycustomer)cust[1]).update(app.get(0));		cust[1].makewishlist(des);		Customer.GetComplains("I love the food well done");		System.out.print("\n");		cust[2].create(4, "25,Elmasr", mai);		cust[2].makemeal(app.get(3));		((Guset)cust[2]).update(app.get(0));		cust[2].update(6, 1);		cust[2].cancel(6);		System.out.print("\n");		cust[3].create(1, "24,Elbasha street", dri);		cust[3].update(6, 0);		cust[3].cancel(6);	}}/**Its the class that represent the food items in the class*/abstract class FoodItem{	private String name;	private String category;	private float price;	private float noofcals;/**the number of customers that can be appropriate by*/	public int noofsatperson;/**It is the counter that increment to give the item unique code*/	public static int count = 0;/**Its a variable to give the item id*/	protected static int no = 1;	/**Constructor to set some default values*/	/*public FoodItem() {		name = "";		category="";		price = 0;		noofcals=0;		noofsatperson=0;		count++;		no = count;	}*/	/**It is a parameterized constructor that is essentially to give the food item its data that is 	 * @param n:the name of the item	 * @param c:the category of the item	 * @param p:the price of the item	 * @param noofcal:the number of the calories in the item	 * @param noofsatsperson:the number of persons that are appropriate by the food items called*/	public FoodItem(String n,String c,float p,float noofcal,int noofsatsperson) {		       name = n;	       category=c;	       price =p;	       noofcals=noofcal;	       noofsatperson = noofsatsperson;		       count++;	       no = count;	}	/**@return the name of the food item */	public String getName() {		return name;	}	/**It is set the name of the food item	 * @param name:the name of the food item*/	public void setName(String name) {		this.name = name;	}	/**@return the category of the food item */	public String getCategory() {		return category;	}	/**It is set the category of the food item	 * @param category:the category of the food item*/	public void setCategory(String category) {		this.category = category;	}	/**@return the price of the food item */	public float getPrice() {		return price;	}	/**It is set the price of the food item	 * @param price:the price of the food item*/	public void setPrice(float price) {		this.price = price;	}	/**@return the number of calories in the food item */	public float getNoofcals() {		return noofcals;	}	/**It is set the number of calories in the food item	 * @param noofcals:the number of calories in the food item*/	public void setNoofcals(float noofcals) {		this.noofcals = noofcals;	}	/**It is an abstract method to show the data of every food item*/	abstract public void showdata(); /*{	 System.out.printf("The fooditem name is : %s\n"	 		+ "The fooditem category is : %s\n"	 		+ "The fooditem price is : %f\n"	 		+ "The fooditem number of calories are: %f\n"	 		+ "The fooditem number of person can appropriated are: %d",getName(),getCategory(),getPrice(),getNoofcals(),noofsatperson);		}*/}/**It is a child class for super class food item and it is type of the types of the food items*/class Appetizers extends FoodItem{	/**It is  the constructor of type of the food item that takes	 * @param n:the name of the item	 * @param c:the category of the item	 * @param p:the price of the item	 * @param noc:the number of the calories in the item	 * @param nosp:the number of persons that are appropriate by the food items called */	public Appetizers(String n,String c,float p,float noc,int nosp) {	 super(n,c,p,noc,nosp);		}	@Override	/**The overriding function to get the data of the item*/	public void showdata() {		 System.out.printf("The fooditem name is : %s\n"			 		+ "The fooditem category is : %s\n"			 		+ "The fooditem price is : %f\n"			 		+ "The fooditem number of calories are: %f\n"			 		+ "The fooditem number of person can appropriated are: %d\n",getName(),getCategory(),getPrice(),getNoofcals(),noofsatperson);				}}/**It is a child class for super class food item and it is type of the types of the food items*/class Desserts extends FoodItem{	/**It is  the constructor of type of the food item that takes	 * @param n:the name of the item	 * @param c:the category of the item	 * @param p:the price of the item	 * @param noc:the number of the calories in the item	 * @param nosp:the number of persons that are appropriate by the food items called */	public Desserts(String n,String c,float p,float noc,int nosp) {		 super(n,c,p,noc,nosp);			}		@Override		/**The overriding function to get the data of the item*/		public void showdata() {			 System.out.printf("The fooditem name is : %s\n"				 		+ "The fooditem category is : %s\n"				 		+ "The fooditem price is : %f\n"				 		+ "The fooditem number of calories are: %f\n"				 		+ "The fooditem number of person can appropriated are: %d\n",getName(),getCategory(),getPrice(),getNoofcals(),noofsatperson);						}}/**It is a child class for super class food item and it is type of the types of the food items*/class MainDashes extends FoodItem{	/**It is  the constructor of type of the food item that takes	 * @param n:the name of the item	 * @param c:the category of the item	 * @param p:the price of the item	 * @param noc:the number of the calories in the item	 * @param nosp:the number of persons that are appropriate by the food items called */	public MainDashes(String n,String c,float p,float noc,int nosp) {		 super(n,c,p,noc,nosp);			}		@Override		/**The overriding function to get the data of the item*/		public void showdata() {			 System.out.printf("The fooditem name is : %s\n"				 		+ "The fooditem category is : %s\n"				 		+ "The fooditem price is : %f\n"				 		+ "The fooditem number of calories are: %f\n"				 		+ "The fooditem number of person can appropriated are: %d\n",getName(),getCategory(),getPrice(),getNoofcals(),noofsatperson);						}}/**It is a child class for super class food item and it is type of the types of the food items*/class Drinks extends FoodItem{	/**It is  the constructor of type of the food item that takes	 * @param n:the name of the item	 * @param c:the category of the item	 * @param p:the price of the item	 * @param noc:the number of the calories in the item	 * @param nosp:the number of persons that are appropriate by the food items called */	public Drinks(String n,String c,float p,float noc,int nosp) {		 super(n,c,p,noc,nosp);			}		@Override		/**The overriding function to get the data of the item*/		public void showdata() {			 System.out.printf("The fooditem name is : %s\n"				 		+ "The fooditem category is : %s\n"				 		+ "The fooditem price is : %f\n"				 		+ "The fooditem number of calories are: %f\n"				 		+ "The fooditem number of person can appropriated are: %d\n",getName(),getCategory(),getPrice(),getNoofcals(),noofsatperson);						}}/**It is the class that represent  the orders that the customers are going to make*/class order{/**It is array of food item that constructed meal*/	private ArrayList<FoodItem>meal ;/**It is current date of the order*/private Date current;/**It is the delivery address*/private String address;/**It is the delivery date of the order made by customers*/private Date delivery;/**It is a variable to give the order its item*/public static int count = 0;public static int no = 1;/**The total price of the order*/private double total;private double discount;/**constructor to set some values*/public order() {	meal = new ArrayList<FoodItem>();	current = new Date();	delivery = new Date();	address = "";	total = 0;	discount = 0;	count++;	no = count;}/**@return the meal of the customer*/public ArrayList<FoodItem> getMeal() {	return meal;}/**It is set the meal that the customer made in the array list * @param meal: the meal made by the customer*/public void setMeal(ArrayList<FoodItem> meal) {	this.meal=meal;}/**@return the current date*/public Date getCurrent() {	return current;}/**setting the current date and time * @param current:the current date*/public void setCurrent(Date current) {	this.current = current;}/**@return the address of the order*/public String getAddress() {	return address;}/**setting the address of the order * @param address: the address of the order*/public void setAddress(String address) {	this.address = address;}/**@return the delivery date of the order*/public Date getDelivery() {	return delivery;}@SuppressWarnings("deprecation")/**setting the delivery date of the order * @param day:it is the number of days incremented to the current date of the order to get the delivery date*/public void setDelivery(int day) {	delivery.setDate(current.getDate()+day);}/**@return the total price of the order*/public double getTotal() {	for(int i=0;i<meal.size();i++) {		total += meal.get(i).getPrice();	}	return total;}/**setting the total price of the order * @param total:the total price of the order*/public void setTotal(double total) {	this.total = total;}/**@return the discount applied for the guests*/public double getDiscount() {	return discount;}/**setting the discount applied for the guests * @param  discount:the discount applied to the guests*/public void setDiscount(double discount) {	this.discount = discount;}/**It is function to show data of meals*/	public void showmealData() {		for(int i = 0;i<meal.size();i++) {			meal.get(i).showdata();	}	}	/**It is a function to show the data of the order*/	public final void showorderData() {		System.out.printf("The order id is: %d\n"				+ "The current date of the order is: %s\n"				+ "The delivery date of the order is: %s\n"				+ "The address of the order is: %s\n"				+ "The total price is: %f\n", no,getCurrent().toString(),getDelivery().toString(),getAddress(),getTotal());	}}/**It is abstract class represent the customers */abstract class Customer{	/**The meals that the customer want to eat but not now or want to eat*/	public ArrayList<ArrayList<FoodItem>>wishlist;/**The meal construct by the customer*/	public ArrayList<FoodItem>meal;/**The order made by the customer*/	public order Order;/**The report of the customer about the quality issues or a review*/	public static String complain;	/**Final discount  value offered to the total*/	public final double dis;	/**It is a constructor to set some default values*/	public Customer() {		wishlist = new ArrayList<ArrayList<FoodItem>>();		meal= new ArrayList<FoodItem>();		Order=new order();		complain="";		dis =0.2;	}	/**Abstract function of creating order according to the its type	 * @param day:the new days extends to the delivery date	 * @param add:the address of delivery	 * @param meal:It is the meal constructed by the customers contains as many food items*/	abstract public void create(int day,String add,ArrayList<FoodItem>meal) ;	/**It is function to cancel the order	 * @param uc:the unique code of the order*/		public void cancel(int uc) {			Calendar c = Calendar.getInstance();			 c.setTime(Order.getDelivery());			 Calendar b = Calendar.getInstance();			 int d = c.get(Calendar.DAY_OF_MONTH);			 int a = b.get(Calendar.DAY_OF_MONTH);			 try {				 if(order.no == uc) {					 if(d-a <= 1) {						 throw new CancelException("You can't delete the order it is made already");					 }else {						 Order = null;						 System.out.println("The order has been deleted");					 }				 }			 }catch(CancelException e) {				 System.out.println("Alert for deleting:"+e.getMessage());			 }			 		}		/**It is function made to make the meal that enter the wish list		 * @param item:the items selected by the customer */		public void makemeal(FoodItem item) {			meal.add(item);			meal.forEach(it->{				it.showdata();			});		}		/**It is function that add the meals to wish list		 * @param meals:the meals that the customer chosen*/		public void makewishlist(ArrayList<FoodItem>meals) {			System.out.println("\n");			System.out.println("The wish list is: \n");			Order.setMeal(meals);			meal.forEach(item->{				wishlist.add(meal);			});			Order.showmealData();		}		//overloading function and overriding function				/**It is function made to update the order by adding more food items to the order and override function as well				 * @param i:the added items to the order*/				abstract public void update(FoodItem i);		//overloading function		/**It is function made to update the order by adding more food items to the order		 * @param i:the added items to the order*/		/*public void update(FoodItem i) {			meal.add(i);			Order.setMeal(meal);			Order.setTotal(Order.getTotal()+i.getPrice());			Order.showorderData();		}*/		//overloading function		/**It is function to update the order by changing the delivery date		 * @param uc:the unique code of the order		 * @param newdeliveryday:the new extended delivery date*/		@SuppressWarnings("deprecation")		public void update(int uc,int newdeliverydate) {			if(order.no == uc) {				Order.setDelivery(newdeliverydate+Order.getDelivery().getDay());				System.out.printf("The new delivery date is: %s", Order.getDelivery().toString());			}else {				System.out.println("You have deleted the order sir");			}		}		/**Function to get the issues or a review from the customers		 * @param com:the issues reported by the customers*/		public static void GetComplains(String com) {			complain = com;			System.out.println("The report is sent");		}}/**It is a class represents the loyalty customers*/class Loyaltycustomer extends Customer{	public ArrayList<FoodItem>meals;	public FoodItem food1;	public FoodItem food2;	public FoodItem food3;	/**constructor to set some values*/	public Loyaltycustomer() {		meals = new ArrayList<FoodItem>();		food1 = new Appetizers("Cheese", "Appetizers", (float)4.00, (float)5.00, 4);		food2 = new Appetizers("Soup", "Appetizers", (float)15.00, (float)15.05, 5);		food3 = new Drinks("Orange Juice", "Drinks", (float)5.00, (float)15.15, 1);	}	 @Override	 /**The function to create order*/	public void create(int days,String ad,ArrayList<FoodItem>mealss) {		 System.out.println("\n");		 System.out.println("Sir, You have a free meal contains two appetizers and a drink");		 System.out.println("Do You want anything else ,for other types of food items?");		Order = new order();		Order.showmealData();		Order.setAddress(ad);		Order.setDelivery(days);		mealss.forEach(item->{			item.getPrice();			Order.setTotal(Order.getTotal()+item.getPrice());		});		Order.getTotal();		meal.addAll(mealss);		Order.showorderData();	}	 public void freemeal() {		 meals.add(food1);		 meals.add(food2);		 meals.add(food3);		 meal.addAll(meals);		meals.forEach(ite->{			ite.setPrice(0);			 Order.setTotal(Order.getTotal()+ite.getPrice());		 });				 Order.setMeal(meal);		 Order.getMeal();		 Order.setTotal(0);		 Order.getTotal();		 Order.showmealData();		 Order.showorderData();	 }	 @Override		public void update(FoodItem i) 		 {				System.out.println("\n");				meal.add(i);				//Order.setMeal(meal);				meal.forEach(item->{					item.showdata();					System.out.println("\n");					Order.setTotal(Order.getTotal()+item.getPrice());					});								System.out.println("\n");				Order.showmealData();				System.out.println("\n");				Order.showorderData();			}}/**It is a child class that represents the guest customers*/class Guset extends Customer{	 @Override	 /**The function to create order	  * @param da:the delivery date of the order	  * @param addr:the address of the order	  * @param meals: the meals that are made by the customers*/	public void create(int da,String addr,ArrayList<FoodItem>meals) {		 System.out.println("Sir, You have a discount up to 20% for every thing today");		 meal.addAll(meals);		// Order.showmealData();		 Order.setDiscount(0.2);		 Order.setAddress(addr);		 Order.setDelivery(da);		 meal.forEach(item->{			 item.showdata();			 Order.setTotal(Order.getTotal()+item.getPrice());		 });		 Order.setTotal(Order.getTotal()*Order.getDiscount());		 Order.showmealData();		 System.out.println("\n");		 Order.showorderData();	}	 @Override		public void update(FoodItem i)  {			System.out.println("\n");			meal.add(i);			//Order.setMeal(meal);			meal.forEach(item->{				item.showdata();				System.out.println("\n");				Order.setTotal((Order.getTotal()+item.getPrice())*Order.getDiscount());				});						System.out.println("\n");			Order.showmealData();			System.out.println("\n");			Order.showorderData();		}}/**It is an interface that show if there are  in the shop*/interface Snacks{	/**It is an boolean function to make sure is there or not*/public boolean IsExit();/**It is an boolean function make sure that is it free if it*/public boolean IsFree();}/**It is a class represents the canned food */class Cannedfood implements Snacks{	private boolean exist;	private boolean free;	public boolean getIsExit() {		return exist;	};	public void setIsExist(boolean e) {		exist = e;	}	@Override	public boolean IsExit() {		return exist;	}	@Override	public boolean IsFree() {		return free;	}	public boolean isFree() {		return free;	}	public void setFree(boolean free) {		this.free = free;	}}/**It is an abstract class represent the pastries food*/abstract class Pastries implements Snacks{	private boolean ex;	private boolean fr;	public Pastries() {		setEx(true);		setFr(true);	}	public boolean isEx() {		return ex;	}	public void setEx(boolean ex) {		this.ex = ex;	}	public boolean isFr() {		return fr;	}	public void setFr(boolean fr) {		this.fr = fr;	}}/**It is an class represent the donates*/class donates extends  Pastries{	private boolean e;	private boolean f;	public donates() {		e = true;		f = true;	}	@Override	public boolean IsExit() {		return e;	}	@Override	public boolean IsFree() {		return f;	}	public boolean isE() {		return e;	}	public void setE(boolean e) {		this.e = e;	}	public boolean isF() {		return f;	}	public void setF(boolean f) {		this.f = f;	}	}/**Exception to handle the cancel order error*/class CancelException extends Exception{	 public CancelException(String mess) {		 super(mess);	 }}